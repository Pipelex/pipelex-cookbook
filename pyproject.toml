[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pipelex-cookbook"
version = "0.1.0"
description = "Cookbook for Pipelex, open-source dev tool based on a simple declarative language that lets you define replicable, structured, composable LLM pipelines."
authors = ["Evotis S.A.S. <evotis@pipelex.com>"]
maintainers = ["Pipelex staff <oss@pipelex.com>"]
license = "Elastic License 2.0"
readme = "README.md"
homepage = "https://github.com/Pipelex/pipelex"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]

[[tool.poetry.packages]]
include = "cookbook"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
pipelex = { version = "^0.1.14", extras = [
    "mistralai",
    "anthropic",
    "google",
    "bedrock",
    "fal",
] }
beautifulsoup4 = "^4.13.4"

[tool.poetry.group.dev.dependencies]
boto3-stubs = "^1.35.24"
mypy = "^1.11.2"
pyright = "1.1.398" # version 1.1.399 generates a ton of false positives
pytest = "^8.3.3"
pytest-pretty = "1.2.0"
pytest_asyncio = "^0.24.0"
reuse = "^5.0.2"
ruff = "^0.6.8"
types-aioboto3 = { version = "^13.4.0", extras = [
    "bedrock",
    "bedrock-runtime",
] }
types-aiofiles = "^24.1.0.20240626"
types-beautifulsoup4 = "^4.12.0.20240907"
types-markdown = "^3.6.0.20240316"
types-networkx = "^3.3.0.20241020"
types-openpyxl = "^3.1.5.20250306"
types-requests = "^2.32.0.2024091"
types-PyYAML = "^6.0.12.20250326"
types-toml = "^0.10.8.20240310"

[tool.mypy]
check_untyped_defs = true
exclude = "^.*\\.venv/.*$"
mypy_path = "."
packages = ["cookbook", "pipelex_libraries"]
plugins = ["pydantic.mypy"]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["json2html"]

[tool.pyright]
analyzeUnannotatedFunctions = true
deprecateTypingAliases = false
disableBytesTypePromotions = true
enableExperimentalFeatures = false
enableTypeIgnoreComments = true
exclude = ["**/node_modules", "**/__pycache__"]
extraPaths = ["./tests"]
include = ["cookbook", "pipelex_libraries"]
pythonVersion = "3.11"
reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertAlwaysTrue = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallInDefaultInitializer = true
reportCallIssue = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
reportGeneralTypeIssues = "error"
reportImplicitOverride = true
reportImplicitStringConcatenation = false
reportImportCycles = true
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidStubStatement = "error"
reportInvalidTypeArguments = "error"
reportInvalidTypeForm = "error"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "error"
reportMissingImports = "error"
reportMissingModuleSource = "warning"
reportMissingParameterType = "error"
reportMissingSuperCall = "none"
reportMissingTypeArgument = "error"
reportMissingTypeStubs = false
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportOptionalCall = "error"
reportOptionalContextManager = "error"
reportOptionalIterable = "error"
reportOptionalMemberAccess = "error"
reportOptionalOperand = "error"
reportOptionalSubscript = "error"
reportOverlappingOverload = "error"
reportPossiblyUnboundVariable = "error"
reportPrivateImportUsage = "error"
reportPrivateUsage = "error"
reportPropertyTypeMismatch = true
reportRedeclaration = "error"
reportReturnType = "error"
reportSelfClsParameterName = "error"
reportShadowedImports = true
reportTypeCommentUsage = "error"
reportTypedDictNotRequiredAccess = "error"
reportUnboundVariable = "error"
reportUndefinedVariable = "error"
reportUninitializedInstanceVariable = "none"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnnecessaryTypeIgnoreComment = "none"
reportUnsupportedDunderAll = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportUnusedCallResult = "none"
reportUnusedClass = "error"
reportUnusedCoroutine = "error"
reportUnusedExcept = "error"
reportUnusedExpression = "error"
reportUnusedFunction = "error"
reportUnusedImport = "none"
reportUnusedVariable = "error"
reportWildcardImportFromLibrary = "error"
strictDictionaryInference = true
strictListInference = true
strictParameterNoneValue = true
strictSetInference = true
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = "--import-mode=importlib -ra -m 'not inference and not imgg'"
asyncio_default_fixture_loop_scope = "session"
markers = [
    "inference: slow and costly due to inference calls",
    "llm: slow and costly due to llm inference calls",
    "imgg: slow and costly due to imgg inference calls",
    "gha_disabled: tests that should not run in GitHub Actions",
]
minversion = "8.0"

[tool.ruff]
exclude = [".mypy_cache", ".ruff_cache", ".venv", ".vscode", "trigger_pipeline"]
line-length = 150
target-version = "py311"

[tool.ruff.format]

[tool.ruff.lint]
ignore = ["F401"]
external = ["F401"]
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "A001",
    "A002",
    "A003",
    "RUF008",
    "RUF009",
    "RUF012",
    "RUF013",
    "RUF100",
    "E501",
    "I",
]
